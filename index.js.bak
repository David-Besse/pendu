// Configuration
const GAME_CONFIG = {
    maxErrors: 6,
    apiUrl: 'https://trouve-mot.fr/api/sizemax/7' // API pour obtenir un mot aléatoire
};

// État du jeu
const gameState = {
    currentWord: '',
    guessedLetters: [],
    errors: 0
};

const HANGMAN_STATES = [
    `
      +---+
      |   |
          |
          |
          |
          |
    =========`,
    `
      +---+
      |   |
      O   |
          |
          |
          |
    =========`,
    `
      +---+
      |   |
      O   |
      |   |
          |
          |
    =========`,
    `
      +---+
      |   |
      O   |
     /|   |
          |
          |
    =========`,
    `
      +---+
      |   |
      O   |
     /|\\  |
          |
          |
    =========`,
    `
      +---+
      |   |
      O   |
     /|\\  |
     /    |
          |
    =========`,
    `
      +---+
      |   |
      O   |
     /|\\  |
     / \\  |
          |
    =========`
];

// Fonctions de mise à jour de l'état
async function resetGameState() {
    try {
        const response = await fetch(GAME_CONFIG.apiUrl);
        const [data] = await response.json();
        gameState.currentWord = data.name.toUpperCase();
        console.log(gameState.currentWord);
    } catch (error) {
        console.error('Erreur lors de la récupération du mot:', error);
        // Mot par défaut en cas d'erreur
        gameState.currentWord = 'PENDU';
    }
    gameState.guessedLetters = [];
    gameState.errors = 0;
}

// Fonctions de manipulation du DOM
function createWordSpans() {
    const wordContainer = document.getElementById('word');
    wordContainer.innerHTML = '';
    
    for (let i = 0; i < gameState.currentWord.length; i++) {
        const span = document.createElement('span');
        span.id = `letter${i}`;
        wordContainer.appendChild(span);
    }
}

function updateDisplay() {
    for (let i = 0; i < gameState.currentWord.length; i++) {
        const letterElement = document.getElementById(`letter${i}`);
        if (letterElement) {
            letterElement.textContent = gameState.guessedLetters.includes(gameState.currentWord[i]) 
                ? gameState.currentWord[i] 
                : '_';
        }
    }
}

function updateErrors() {
    document.getElementById('error-count').textContent = gameState.errors;
    // Mise à jour du dessin du pendu
    document.getElementById('hangman-drawing').textContent = HANGMAN_STATES[gameState.errors];
}

function updateUsedLetters() {
    document.getElementById('letters-list').textContent = gameState.guessedLetters.join(', ');
}

// Fonctions de logique du jeu
function checkWinCondition() {
    return [...gameState.currentWord].every(letter => gameState.guessedLetters.includes(letter));
}

function handleGuess(letter) {
    if (!gameState.guessedLetters.includes(letter)) {
        gameState.guessedLetters.push(letter);
        updateUsedLetters();
        
        if (!gameState.currentWord.includes(letter)) {
            gameState.errors++;
            updateErrors();
        }
        
        updateDisplay();
        checkGameStatus();
    }
}

function handleWordGuess() {
    const guess = prompt('Entrez votre proposition :')?.toUpperCase();
    if (!guess) return;

    if (guess === gameState.currentWord) {
        gameState.guessedLetters = [...gameState.currentWord];
        updateDisplay();
        showGameResult(true);
    } else {
        gameState.errors = GAME_CONFIG.maxErrors;
        updateErrors();
        showGameResult(false);
    }
}

function showGameResult(isWin) {
    if (isWin) {
        Swal.fire({
            title: 'Félicitations !',
            text: 'Vous avez gagné !',
            icon: 'success',
            confirmButtonText: 'Super !'
        });
    } else {
        Swal.fire({
            title: 'Game Over !',
            text: 'Le mot était : ' + gameState.currentWord,
            icon: 'error',
            confirmButtonText: 'Réessayer'
        });
    }
}

function checkGameStatus() {
    if (checkWinCondition()) {
        showGameResult(true);
    } else if (gameState.errors >= GAME_CONFIG.maxErrors) {
        showGameResult(false);
    }
}

// Fonction d'initialisation
async function initGame() {
    await resetGameState();
    createWordSpans();
    updateDisplay();
    updateErrors();
    updateUsedLetters();
}

// Gestionnaires d'événements
function setupEventListeners() {
    document.addEventListener('keypress', (e) => {
        if (gameState.errors < GAME_CONFIG.maxErrors) {
            const letter = e.key.toUpperCase();
            if (/^[A-Z]$/.test(letter)) {
                handleGuess(letter);
            }
        }
    });

    document.getElementById('restart').addEventListener('click', initGame);
    document.getElementById('deviner').addEventListener('click', () => {
        Swal.fire({
            title: 'Devinez le mot',
            input: 'text',
            inputPlaceholder: 'Entrez votre proposition...',
            showCancelButton: true,
            confirmButtonText: 'Deviner',
            cancelButtonText: 'Annuler',
            background: '#fff',
            customClass: {
                confirmButton: 'swal-button',
                cancelButton: 'swal-button'
            }
        }).then((result) => {
            if (result.isConfirmed && result.value) {
                const guess = result.value.toUpperCase();
                if (guess === gameState.currentWord) {
                    gameState.guessedLetters = [...gameState.currentWord];
                    updateDisplay();
                    showGameResult(true);
                } else {
                    gameState.errors = GAME_CONFIG.maxErrors;
                    updateErrors();
                    showGameResult(false);
                }
            }
        });
    });
}

// Initialisation au chargement
document.addEventListener('DOMContentLoaded', () => {
    setupEventListeners();
    initGame();
});
